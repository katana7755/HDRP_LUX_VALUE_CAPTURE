#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/TextureXR.hlsl"

#define SAMPLE_COUNT_PER_ROW 32
#define SAMPLE_COUNT_TOTAL (SAMPLE_COUNT_PER_ROW * SAMPLE_COUNT_PER_ROW)
#define DIGIT_TEXTURE_WIDTH 6
#define DIGIT_TEXTURE_HEIGHT 9
#define MAX_DIGIT_COUNT (SAMPLE_COUNT_PER_ROW / DIGIT_TEXTURE_WIDTH)

Texture2D _Lux_Value_Buffer;
uint2 _Buffer_Size;
uint2 _Start_Offset;
Texture2D _Number_Texture;
RWTexture2D<float4> _Test_Result;

groupshared float sampleLuxValues[SAMPLE_COUNT_PER_ROW * SAMPLE_COUNT_PER_ROW];

uint GetDigitCount(uint value)
{
    uint digit = 0;

    while (value > 0)
    {
        ++digit;
        value /= 10;
    }

    return max(digit, 1);    
}

bool SampleNumberFont(int2 pixelCoords, uint digit)
{    
    if (pixelCoords.x < 0 || pixelCoords.x >= 5 || pixelCoords.y < 0 || pixelCoords.y >= 9)
    {
        return false;
    }

    return _Number_Texture[pixelCoords + int2(digit * 5, 0)].x > 0.5;
}

[numthreads(SAMPLE_COUNT_PER_ROW, SAMPLE_COUNT_PER_ROW, 1)]
void CSMain (uint3 groupid : SV_GroupID, uint3 groupthreadid : SV_GroupThreadID, uint3 id : SV_DispatchThreadID)
{
    uint2 pixelCoords = id.xy + _Start_Offset;
    uint sampleIndex = groupthreadid.x * SAMPLE_COUNT_PER_ROW + groupthreadid.y;
    //float2 value = _Lux_Value_Buffer[COORD_TEXTURE2D_X(pixelCoords)].xy;
    float2 value = _Lux_Value_Buffer[pixelCoords].xy;

    if (pixelCoords.x < 0 || pixelCoords.x > _Buffer_Size.x)
    {        
        sampleLuxValues[sampleIndex] = -1.0;
    }
    else if (pixelCoords.x < 0 || pixelCoords.x > _Buffer_Size.x)
    {
        sampleLuxValues[sampleIndex] = -1.0;
    }
    else
    {   
        if (value.y < 1.0)
        {
            sampleLuxValues[sampleIndex] = -1.0;
        }
        else
        {
            sampleLuxValues[sampleIndex] = max(value.x, 0.0);
        }
    }

    GroupMemoryBarrierWithGroupSync();

    int i = 0;

    if (groupthreadid.x == 0 && groupthreadid.y == 0)
    {        
        bool isValidSample = true;
        float luxSum = 0.0;

        for (i = 0; i < SAMPLE_COUNT_TOTAL; ++i)
        {
            if (sampleLuxValues[i] < 0.0)        
            {
                isValidSample = false;
            }
            
            luxSum += max(sampleLuxValues[i], 0.0);
        }        

        if (isValidSample)
        {
            sampleLuxValues[0] = luxSum / SAMPLE_COUNT_TOTAL;
            sampleLuxValues[1] = 1.0;
        }
        else
        {            
            sampleLuxValues[1] = -1.0;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    float4 tileColor = float4(0.0, 0.0, 0.0, 1.0);

    if (groupid.x % 2 == 0)
    {
        if (groupid.y % 2 == 0)
        {
            tileColor = float4(0.0, 0.8, 0.0, 1.0);
        }
        else
        {            
            tileColor = float4(0.0, 0.0, 0.8, 1.0);
        }        
    }
    else
    {
        if (groupid.y % 2 == 0)
        {
            tileColor = float4(0.0, 0.0, 0.8, 1.0);
        }
        else
        {            
            tileColor = float4(0.0, 0.8, 0.0, 1.0);
        }                
    }

    if (sampleLuxValues[1] > 0.0)
    {
        uint digitValue = (uint)sampleLuxValues[0];
        uint digitCount = GetDigitCount(digitValue);
        float4 hitColor = (digitCount > MAX_DIGIT_COUNT) ? float4(1.0, 0.0, 0.0, 1.0) : float4(1.0, 1.0, 1.0, 1.0);
        digitCount = min(digitCount, MAX_DIGIT_COUNT);

        int2 digitPixelCoords = groupthreadid.xy - (SAMPLE_COUNT_PER_ROW / 2);
        digitPixelCoords.x += (digitCount * DIGIT_TEXTURE_WIDTH / 2);
        digitPixelCoords.y += ((DIGIT_TEXTURE_HEIGHT - 1) / 2);

        bool isHit = false;
        int digitIndex = (digitPixelCoords.x < 0) ? -1 : 0;
        
        while (digitPixelCoords.x >= DIGIT_TEXTURE_WIDTH)
        {
            ++digitIndex;
            digitPixelCoords.x -= DIGIT_TEXTURE_WIDTH;
        } 
        
        if (digitIndex >= 0 && digitIndex < (int)digitCount)
        {
            for (i = (digitCount - digitIndex - 1); i > 0; --i)
            {            
                digitValue /= 10;
            }

            if (SampleNumberFont(digitPixelCoords, digitValue % 10))
            {
                isHit = true;
            }
        }

        _Test_Result[pixelCoords] = isHit ? hitColor : tileColor;
    }
    else
    {
        _Test_Result[pixelCoords] = value.y < 1.0 ? float4(0.0, 0.0, 0.0, 1.0) : tileColor;
    }
}
